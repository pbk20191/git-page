const i=self;i.addEventListener("install",()=>i.skipWaiting());i.addEventListener("activate",t=>t.waitUntil(i.clients.claim()));i.addEventListener("message",t=>{if(t.data)t.data.type==="deregister"?i.registration.unregister().then(()=>i.clients.matchAll()).then(e=>{e.forEach(n=>n.navigate(n.url))}):t.data.type;else return});i.addEventListener("fetch",function(t){const e=t.request;if(e.cache==="only-if-cached"&&e.mode!=="same-origin"||e.url.includes(".wasm"))return;console.log("fetch",e.url,e.mode,e.cache);const n=e.mode==="no-cors"?new Request(e,{credentials:"omit"}):e,a=fetch(n,{signal:AbortSignal.timeout(5e3)}).catch(s=>(console.error("Fetch failed; returning offline page instead.",s),new Response("<h1>Offline</h1>",{status:503,statusText:"Service Unavailable",headers:{"Content-Type":"text/html","Cache-Control":"no-store","Cross-Origin-Embedder-Policy":"credentialless","Cross-Origin-Resource-Policy":"cross-origin","Cross-Origin-Opener-Policy":"same-origin"}}))).then(s=>{if(s.status===0)return s;const r=new Headers(s.headers);return r.set("Cross-Origin-Embedder-Policy","credentialless"),r.set("Cross-Origin-Opener-Policy","same-origin"),new Response(s.body,{status:s.status,statusText:s.statusText,headers:r})});t.respondWith(a)});
